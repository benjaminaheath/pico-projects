// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// pwmpio //
// ------ //

#define pwmpio_wrap_target 0
#define pwmpio_wrap 3

static const uint16_t pwmpio_program_instructions[] = {
            //     .wrap_target
    0x97a0, //  0: pull   block           side 1 [7] 
    0x7721, //  1: out    x, 1            side 1 [7] 
    0xa742, //  2: nop                    side 0 [7] 
    0xa742, //  3: nop                    side 0 [7] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pwmpio_program = {
    .instructions = pwmpio_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config pwmpio_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pwmpio_wrap_target, offset + pwmpio_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void pwmpio_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    pio_sm_config c = pwmpio_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, 1);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_init(pio,sm,offset, &c);
    pio_sm_set_enabled(pio,sm, true);
}

#endif

